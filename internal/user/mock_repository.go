// Code generated by mockery v2.15.0. DO NOT EDIT.

package user

import (
	context "context"
	common "faceit/internal/common"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// mockRepository is an autogenerated mock type for the repository type
type mockRepository struct {
	mock.Mock
}

// create provides a mock function with given fields: ctx, user, password
func (_m *mockRepository) create(ctx context.Context, user User, password string) (*User, error) {
	ret := _m.Called(ctx, user, password)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, User, string) *User); ok {
		r0 = rf(ctx, user, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, User, string) error); ok {
		r1 = rf(ctx, user, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// deleteByID provides a mock function with given fields: ctx, id
func (_m *mockRepository) deleteByID(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// findByID provides a mock function with given fields: ctx, id
func (_m *mockRepository) findByID(ctx context.Context, id uuid.UUID) (*User, error) {
	ret := _m.Called(ctx, id)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// list provides a mock function with given fields: ctx, pagination, filter
func (_m *mockRepository) list(ctx context.Context, pagination common.Pagination, filter *User) ([]User, error) {
	ret := _m.Called(ctx, pagination, filter)

	var r0 []User
	if rf, ok := ret.Get(0).(func(context.Context, common.Pagination, *User) []User); ok {
		r0 = rf(ctx, pagination, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, common.Pagination, *User) error); ok {
		r1 = rf(ctx, pagination, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// update provides a mock function with given fields: ctx, id, user
func (_m *mockRepository) update(ctx context.Context, id uuid.UUID, user User) (*User, error) {
	ret := _m.Called(ctx, id, user)

	var r0 *User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, User) *User); ok {
		r0 = rf(ctx, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, User) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// updatePassword provides a mock function with given fields: ctx, id, password
func (_m *mockRepository) updatePassword(ctx context.Context, id uuid.UUID, password string) error {
	ret := _m.Called(ctx, id, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// newMockRepository creates a new instance of mockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockRepository(t mockConstructorTestingTnewMockRepository) *mockRepository {
	mock := &mockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
