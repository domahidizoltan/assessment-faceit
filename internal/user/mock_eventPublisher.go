// Code generated by mockery v2.15.0. DO NOT EDIT.

package user

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// mockEventPublisher is an autogenerated mock type for the eventPublisher type
type mockEventPublisher struct {
	mock.Mock
}

// publishCreated provides a mock function with given fields: ctx, userID, userChanges
func (_m *mockEventPublisher) publishCreated(ctx context.Context, userID uuid.UUID, userChanges *User) error {
	ret := _m.Called(ctx, userID, userChanges)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *User) error); ok {
		r0 = rf(ctx, userID, userChanges)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// publishDeleted provides a mock function with given fields: ctx, userID
func (_m *mockEventPublisher) publishDeleted(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// publishPasswordChanged provides a mock function with given fields: ctx, userID
func (_m *mockEventPublisher) publishPasswordChanged(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// publishUpdated provides a mock function with given fields: ctx, userID, userChanges
func (_m *mockEventPublisher) publishUpdated(ctx context.Context, userID uuid.UUID, userChanges *User) error {
	ret := _m.Called(ctx, userID, userChanges)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *User) error); ok {
		r0 = rf(ctx, userID, userChanges)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockEventPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEventPublisher creates a new instance of mockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEventPublisher(t mockConstructorTestingTnewMockEventPublisher) *mockEventPublisher {
	mock := &mockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
